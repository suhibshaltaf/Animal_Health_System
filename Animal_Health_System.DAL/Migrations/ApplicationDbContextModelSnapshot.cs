// <auto-generated />
using System;
using Animal_Health_System.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Animal_Health_System.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("FarmId", "Name")
                        .IsUnique();

                    b.ToTable("animals");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6236ac17-870c-4a78-ba08-dc95fb29137d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46ca33a5-bfc3-467b-b142-3bd47e456691",
                            Email = "admin@medc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MEDC.COM",
                            NormalizedUserName = "ADMIN@MEDC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMFhPQyM9rq+9TpR9nHvUCsr1lqjbVMtYNPdVLBFISD8fkSv4+Bt3uWFnz+QyoURUA==",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            SecurityStamp = "6b0dfd7f-33e8-489d-b060-ac691af80f32",
                            TwoFactorEnabled = false,
                            UserName = "admin@medc.com"
                        },
                        new
                        {
                            Id = "e417b8c6-4ea5-4f77-b5b9-94efca32912c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e251ebf-a29a-4dca-8906-292adfdca4c0",
                            Email = "owner@medc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER@MEDC.COM",
                            NormalizedUserName = "OWNER@MEDC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKi/LQVxEFFJ66ym/UBJTKjywj0p/61+r+J3tLo/ynuAEiVx3n5FdpYbDm+/L5dlsA==",
                            PhoneNumberConfirmed = false,
                            Role = "Owner",
                            SecurityStamp = "fae8410e-15c2-4c35-a46b-dffbdb480ce9",
                            TwoFactorEnabled = false,
                            UserName = "owner@medc.com"
                        },
                        new
                        {
                            Id = "853951fb-3305-4392-b9e4-37244c8bfa02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3d36b4c-52d3-4acc-9c5b-ecd82f581ec9",
                            Email = "veterinarian@medc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VETERINARIAN@MEDC.COM",
                            NormalizedUserName = "VETERINARIAN@MEDC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOhCpUo7IroF+XMQOmV48vv918Y84qF2q/OpRAnInE9NUXidJnThEf6ZCAIggOjw3w==",
                            PhoneNumberConfirmed = false,
                            Role = "Veterinarian",
                            SecurityStamp = "1aa4ab08-1b7c-4b2d-878c-807741cb7a7e",
                            TwoFactorEnabled = false,
                            UserName = "veterinarian@medc.com"
                        },
                        new
                        {
                            Id = "168e07b3-77dd-485e-96ce-509abbe65afe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0efb484f-de45-4ce2-b550-15be6ce78da0",
                            Email = "farmstaff@medc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FARMSTAFF@MEDC.COM",
                            NormalizedUserName = "FARMSTAFF@MEDC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKnh19zDxucTDr0rv4ZWWGRv8Bh37QfLgmIA1gyZAd1AvnhfuLlLhKAJWVDdVVC2xA==",
                            PhoneNumberConfirmed = false,
                            Role = "FarmStaff",
                            SecurityStamp = "51fcd890-0902-47e2-a3aa-311fa449452a",
                            TwoFactorEnabled = false,
                            UserName = "farmstaff@medc.com"
                        });
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Birth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<string>("BirthCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfOffspring")
                        .HasColumnType("int");

                    b.Property<int>("PregnancyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("PregnancyId");

                    b.ToTable("births");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Farm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Name", "OwnerId")
                        .IsUnique();

                    b.ToTable("farms");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.FarmStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnimalId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateHired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("FarmId", "FullName")
                        .IsUnique();

                    b.ToTable("farmStaff");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Mating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<int>("FemaleAnimalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Ispregnancyevent")
                        .HasColumnType("bit");

                    b.Property<int>("MaleAnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.HasIndex("FemaleAnimalId");

                    b.HasIndex("MaleAnimalId", "FemaleAnimalId", "MatingDate")
                        .IsUnique();

                    b.ToTable("matings");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.MedicalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExaminationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VeterinarianId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("VeterinarianId");

                    b.HasIndex("AnimalId", "ExaminationDate")
                        .IsUnique();

                    b.ToTable("medicalExaminations");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("medicalRecords");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("medications");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("owners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "e417b8c6-4ea5-4f77-b5b9-94efca32912c",
                            CreatedAt = new DateTime(2025, 2, 25, 20, 14, 56, 220, DateTimeKind.Utc).AddTicks(2178),
                            Email = "owner@medc.com",
                            FullName = "John Doe",
                            IsDeleted = false,
                            PhoneNumber = "123-456-7890",
                            UpdatedAt = new DateTime(2025, 2, 25, 20, 14, 56, 220, DateTimeKind.Utc).AddTicks(2184)
                        });
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Pregnancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasComplications")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MatingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatingId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MatingId");

                    b.HasIndex("AnimalId", "MatingDate")
                        .IsUnique()
                        .HasFilter("[AnimalId] IS NOT NULL");

                    b.ToTable("pregnancies");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("vaccines");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.VaccineHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdministrationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.Property<int>("VeterinarianId")
                        .HasColumnType("int");

                    b.Property<int>("medicalRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VaccineId");

                    b.HasIndex("VeterinarianId");

                    b.HasIndex("medicalRecordId");

                    b.ToTable("vaccineHistories");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Veterinarian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.Property<decimal>("salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("veterinarians");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "853951fb-3305-4392-b9e4-37244c8bfa02",
                            CreatedAt = new DateTime(2025, 2, 25, 20, 14, 56, 280, DateTimeKind.Utc).AddTicks(9384),
                            Email = "veterinarian@medc.com",
                            FullName = "Dr. Smith",
                            IsDeleted = false,
                            PhoneNumber = "123-456-7890",
                            Specialty = "Small Animal",
                            UpdatedAt = new DateTime(2025, 2, 25, 20, 14, 56, 280, DateTimeKind.Utc).AddTicks(9390),
                            YearsOfExperience = 5,
                            salary = 50000m
                        });
                });

            modelBuilder.Entity("MedicalExaminationMedication", b =>
                {
                    b.Property<int>("MedicalExaminationsId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationsId")
                        .HasColumnType("int");

                    b.HasKey("MedicalExaminationsId", "MedicationsId");

                    b.HasIndex("MedicationsId");

                    b.ToTable("MedicalExamination_Medication", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "47a40483-350c-4fbb-a37d-59cd65d9e9d5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "747f509e-c9ae-4bcf-bd79-3c16ae66e67c",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "3aa0d7db-7a3c-48d7-9ee6-9cb385c390a4",
                            Name = "Veterinarian",
                            NormalizedName = "VETERINARIAN"
                        },
                        new
                        {
                            Id = "d5c07b12-d93e-4191-87d4-85aa4b92a625",
                            Name = "FarmStaff",
                            NormalizedName = "FARMSTAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e417b8c6-4ea5-4f77-b5b9-94efca32912c",
                            RoleId = "747f509e-c9ae-4bcf-bd79-3c16ae66e67c"
                        },
                        new
                        {
                            UserId = "853951fb-3305-4392-b9e4-37244c8bfa02",
                            RoleId = "3aa0d7db-7a3c-48d7-9ee6-9cb385c390a4"
                        },
                        new
                        {
                            UserId = "168e07b3-77dd-485e-96ce-509abbe65afe",
                            RoleId = "d5c07b12-d93e-4191-87d4-85aa4b92a625"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Animal", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.Farm", "Farm")
                        .WithMany("Animals")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Birth", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.Animal", "Animal")
                        .WithMany("births")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Animal_Health_System.DAL.Models.Pregnancy", "Pregnancy")
                        .WithMany("Births")
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Pregnancy");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Farm", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.Owner", "Owner")
                        .WithMany("Farms")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.FarmStaff", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.Animal", null)
                        .WithMany("FarmStaffs")
                        .HasForeignKey("AnimalId");

                    b.HasOne("Animal_Health_System.DAL.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("FarmStaff")
                        .HasForeignKey("Animal_Health_System.DAL.Models.FarmStaff", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Animal_Health_System.DAL.Models.Farm", "Farm")
                        .WithMany("FarmStaffs")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Mating", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.Farm", "Farm")
                        .WithMany("Matings")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Animal_Health_System.DAL.Models.Animal", "FemaleAnimal")
                        .WithMany()
                        .HasForeignKey("FemaleAnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Animal_Health_System.DAL.Models.Animal", "MaleAnimal")
                        .WithMany()
                        .HasForeignKey("MaleAnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("FemaleAnimal");

                    b.Navigation("MaleAnimal");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.MedicalExamination", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.Animal", "Animal")
                        .WithMany("MedicalExaminations")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Animal_Health_System.DAL.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("Examinations")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Animal_Health_System.DAL.Models.Veterinarian", "Veterinarian")
                        .WithMany("MedicalExaminations")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("MedicalRecord");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.MedicalRecord", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.Animal", "Animal")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("Animal_Health_System.DAL.Models.MedicalRecord", "AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Owner", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Owner")
                        .HasForeignKey("Animal_Health_System.DAL.Models.Owner", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Pregnancy", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.Animal", "Animal")
                        .WithMany("Pregnancies")
                        .HasForeignKey("AnimalId");

                    b.HasOne("Animal_Health_System.DAL.Models.Mating", "Mating")
                        .WithMany("Pregnancies")
                        .HasForeignKey("MatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Mating");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.VaccineHistory", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.Vaccine", "vaccine")
                        .WithMany("VaccineHistories")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Animal_Health_System.DAL.Models.Veterinarian", "veterinarian")
                        .WithMany("VaccineHistories")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Animal_Health_System.DAL.Models.MedicalRecord", "medicalRecord")
                        .WithMany("vaccineHistories")
                        .HasForeignKey("medicalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("medicalRecord");

                    b.Navigation("vaccine");

                    b.Navigation("veterinarian");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Veterinarian", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Veterinarian")
                        .HasForeignKey("Animal_Health_System.DAL.Models.Veterinarian", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MedicalExaminationMedication", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.MedicalExamination", null)
                        .WithMany()
                        .HasForeignKey("MedicalExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Animal_Health_System.DAL.Models.Medication", null)
                        .WithMany()
                        .HasForeignKey("MedicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Animal_Health_System.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Animal_Health_System.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Animal", b =>
                {
                    b.Navigation("FarmStaffs");

                    b.Navigation("MedicalExaminations");

                    b.Navigation("MedicalRecord")
                        .IsRequired();

                    b.Navigation("Pregnancies");

                    b.Navigation("births");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.ApplicationUser", b =>
                {
                    b.Navigation("FarmStaff");

                    b.Navigation("Owner");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Farm", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("FarmStaffs");

                    b.Navigation("Matings");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Mating", b =>
                {
                    b.Navigation("Pregnancies");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.MedicalRecord", b =>
                {
                    b.Navigation("Examinations");

                    b.Navigation("vaccineHistories");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Owner", b =>
                {
                    b.Navigation("Farms");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Pregnancy", b =>
                {
                    b.Navigation("Births");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Vaccine", b =>
                {
                    b.Navigation("VaccineHistories");
                });

            modelBuilder.Entity("Animal_Health_System.DAL.Models.Veterinarian", b =>
                {
                    b.Navigation("MedicalExaminations");

                    b.Navigation("VaccineHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
